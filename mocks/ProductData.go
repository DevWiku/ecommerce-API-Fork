// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	product "ecommerce/features/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductData is an autogenerated mock type for the ProductData type
type ProductData struct {
	mock.Mock
}

// Add provides a mock function with given fields: newContent, id
func (_m *ProductData) Add(newContent product.CoreProduct, id uint) (product.CoreProduct, error) {
	ret := _m.Called(newContent, id)

	var r0 product.CoreProduct
	if rf, ok := ret.Get(0).(func(product.CoreProduct, uint) product.CoreProduct); ok {
		r0 = rf(newContent, id)
	} else {
		r0 = ret.Get(0).(product.CoreProduct)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.CoreProduct, uint) error); ok {
		r1 = rf(newContent, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userId, contentId
func (_m *ProductData) Delete(userId uint, contentId uint) error {
	ret := _m.Called(userId, contentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userId, contentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ProductData) GetAll() ([]product.CoreProduct, error) {
	ret := _m.Called()

	var r0 []product.CoreProduct
	if rf, ok := ret.Get(0).(func() []product.CoreProduct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.CoreProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: tes
func (_m *ProductData) GetById(tes uint) ([]product.CoreProduct, error) {
	ret := _m.Called(tes)

	var r0 []product.CoreProduct
	if rf, ok := ret.Get(0).(func(uint) []product.CoreProduct); ok {
		r0 = rf(tes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.CoreProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(tes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, contentId, updatedData
func (_m *ProductData) Update(userId uint, contentId uint, updatedData product.CoreProduct) (product.CoreProduct, error) {
	ret := _m.Called(userId, contentId, updatedData)

	var r0 product.CoreProduct
	if rf, ok := ret.Get(0).(func(uint, uint, product.CoreProduct) product.CoreProduct); ok {
		r0 = rf(userId, contentId, updatedData)
	} else {
		r0 = ret.Get(0).(product.CoreProduct)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, product.CoreProduct) error); ok {
		r1 = rf(userId, contentId, updatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductData interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductData creates a new instance of ProductData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductData(t mockConstructorTestingTNewProductData) *ProductData {
	mock := &ProductData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

openapi: 3.0.0
info:
  version: 1.0.0
  title: Ecommerce
  description: RESTful API for our Ecommerce App Project
# paths: {}
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TECHMIN7_1/Ecommerce/1.0.0
  - description: Development
    url: https://remotecareer.tech
  
  
tags:
  - name: Auth
  - name: Users
  - name: Products
 
paths:
  /register:
    post:
      tags:
        - "Auth"
      description: To Add a new user
      summary: register user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                address:
                  type: string
            example:
              name: "Deva"
              email: "techmin7@gmail.com"
              password: "rahasia"
              address: "jalan srilanka"
      responses:
        201:
          description: "Success Register"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Registered a new account successfully"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
  /login:
    post:
      tags:
        - "Auth"
      description: User Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: "Success login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data: 
                  id: 1
                  avatar: "www.google.com"
                  name: "deva"
                  email: "deva@gmail.com"
                message: "Logged in successfully"
                token: "hiaukbdkjasf.fshbf.fashbdasjkb"
        404:
          description: "Invalid user input"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "data not found"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
  /users:
    put:
      tags:
        - "Users"
      summary: Update user data
      description: Update user data
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              example:
                name: "Deva"
                avatar: "www.google.com"
                email: "deva@gmail.com"
                password: "123"
                address: "jalan srilanka"
      responses:
        200:
          description: "Success update profile"
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Updated profile successfully"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - "Users"
      summary: Deactivate user
      description: Deactivate user
      security:
        - JWTAuth : []
      responses:
        200:
          description: "Success deactivate"
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "Deactivated your account successfully"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - "Users"
      summary: Get user data by ID
      description: show user data by ID
      security:
        - JWTAuth : []
      responses:
        200:
          description: Success show user data
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id : 1
                    name: "deva"
                    avatar: "www.google.com"
                    email: "deva@gmail.com"
                    address: "jalan srilanka"
                    products: [{
                        id: 1,
                        title: "mangkok",
                        price: 50000,
                        description: "mangkok kuat tahan panas",
                        image: "www.google.com",
                      }]
                  message: "Displayed user profile successfully"
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /products:
    post:
      tags:
        - "Products"
      summary: Add products to user
      description: menambahkan product ke user
      security:
        - JWTAuth : []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              example:
                title: "mangkok baja"
                price: 100000
                description: "mangkok tahan panas tinggi"
                image: "www.google.com"
      responses:
        201:
          description: Posting berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "posting product berhasil"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - "Products"
      summary: Get all product from all user without Login
      description: menampilkan semua product dari semua user untuk fungsi tanpa login
      responses:
        200:
          description: data product dari semua user
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                     -  id : 1
                        title: "mangkok baja"
                        price: 100000
                        image: "www.google.com"
                     -  id : 2
                        title: "piring batu"
                        price: 500000
                        image: "www.google.com"
                  message: "berhasil menampilkan semua product"
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /products/{product_id}: 
    get:
      tags:
        - "Products"
      summary: get product user by id product
      description: menampilkan data product dari product id
      parameters:
        - name: product_id
          description: "id product"
          required: true
          in: path
          schema:
            description: "id product"
            type: integer
            example: 1
      responses:
        200:
          description: data product dari product id
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                      title: "mangkok baja"
                      price: 100000
                      description: "mangkok tahan panas tinggi"
                      image: "www.google.com"
                      seller_name: "paijo"
                  message: "berhasil menampilkan product"
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Products"
      summary: edit product to user
      description: mengubah product user
      security:
        - JWTAuth : []
      parameters:
        - name: product_id
          description: "id product"
          required: true
          in: path
          schema:
            description: "id product"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              example:
                title: "mangkok baja"
                price: 100000
                description: "mangkok tahan panas tinggi"
                image: "www.google.com"
      responses:
        200:
          description: "Berhasil update"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                message: "update berhasil"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
  
    delete:
      tags:
        - "Products"
      summary: Delete product user
      description: Menghapus product user
      security:
        - JWTAuth : []
      parameters:
        - name: product_id
          description: "id product"
          required: true
          in: path
          schema:
            description: "id product"
            type: integer
            example: 1
      responses:
        200:
          description: "Berhasil delete"
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "Delete product berhasil"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user Token"  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
        email:
          type: string
        password:
          type: string
        avatar:
          type: string
    Content:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        price:
          type: integer
          format: int64
        description:
          type: string
        image:
          type: string
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items: 
            type: object
        message:
          type: string
  responses:
    400:
      description: "Invalid user input"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Please input correctly"
    404:
      description: "Not Found"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Data not found"
    500:
      description: "Server's problem"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "There is a problem with the server"